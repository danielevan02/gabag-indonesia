generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String       @default("NO_NAME")
  email         String       @unique(map: "user_email_idx")
  emailVerified DateTime?    @db.Timestamp(6)
  image         String?
  password      String?
  role          String       @default("user")
  address       Json?        @db.Json
  createdAt     DateTime     @default(now()) @db.Timestamp(6)
  updatedAt     DateTime     @updatedAt
  phone         String       @unique @default("")
  accounts      Account[]
  carts         Cart[]
  orders        Order[]
  redemptions   Redemption[]
  reviews       Review[]
  sessions      Session[]
}

model Account {
  userId            String   @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @db.Timestamp(6)
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  createdAt    DateTime @default(now()) @db.Timestamp(6)
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model SubCategory {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  discount    Int?       @default(0)
  createdAt   DateTime   @default(now()) @db.Timestamp(6)
  categoryId  String     @db.Uuid
  mediaFileId String?
  products    Product[]
  category    Category   @relation(fields: [categoryId], references: [id])
  mediaFile   MediaFile? @relation(fields: [mediaFileId], references: [id])
  vouchers    Voucher[]
}

model Category {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  createdAt     DateTime      @default(now()) @db.Timestamp(6)
  mediaFileId   String
  mediaFile     MediaFile     @relation(fields: [mediaFileId], references: [id])
  subCategories SubCategory[]
  vouchers      Voucher[]
}

model MediaFile {
  id                String                 @id @default(cuid())
  thumbnail_url     String
  public_id         String                 @unique
  secure_url        String                 @db.VarChar(500)
  width             Int?
  height            Int?
  format            String?                @db.VarChar(10)
  bytes             Int?
  resource_type     String                 @default("image") @db.VarChar(20)
  original_filename String?                @db.VarChar(255)
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  categories        Category[]
  productImages     ProductMediaRelation[]
  subCategories     SubCategory[]
  variants          Variant[]
  carouselsDesktop  Carousel[]             @relation("CarouselDesktopImage")
  carouselsMobile   Carousel[]             @relation("CarouselMobileImage")

  @@index([public_id])
  @@map("MediaFile")
}

model Product {
  id            String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  slug          String                 @unique(map: "product_slug_idx")
  description   String
  stock         Int                    @default(0)
  discount      Int?
  hasVariant    Boolean                @default(false)
  height        Int
  length        Int
  sku           String?                @unique(map: "product_sku")
  weight        Int
  width         Int
  createdAt     DateTime               @default(now()) @db.Timestamp(6)
  subCategoryId String                 @db.Uuid
  regularPrice  BigInt                 @default(0)
  campaignItems CampaignItem[]
  orderItems    OrderItem[]
  subCategory   SubCategory            @relation(fields: [subCategoryId], references: [id])
  images        ProductMediaRelation[]
  reviews       Review[]
  variants      Variant[]
  vouchers      Voucher[]              @relation("ProductToVoucher")
}

model ProductMediaRelation {
  id          String    @id @default(cuid())
  productId   String    @db.Uuid
  mediaFileId String
  orderIndex  Int       @default(0)
  isPrimary   Boolean   @default(false)
  altText     String?   @db.VarChar(255)
  createdAt   DateTime  @default(now())
  mediaFile   MediaFile @relation(fields: [mediaFileId], references: [id], onDelete: Cascade)
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, mediaFileId])
  @@index([productId, orderIndex])
  @@index([productId, isPrimary])
  @@map("ProductMediaRelation")
}

model Variant {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  discount      Int?
  stock         Int            @default(0)
  createdAt     DateTime       @default(now()) @db.Timestamp(6)
  sku           String?        @unique(map: "variant_sku")
  productId     String         @db.Uuid
  regularPrice  BigInt         @default(0)
  mediaFileId   String
  campaignItems CampaignItem[]
  orderItems    OrderItem[]
  mediaFile     MediaFile      @relation(fields: [mediaFileId], references: [id])
  product       Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  vouchers      Voucher[]      @relation("VariantToVoucher")
}

model Voucher {
  id                  String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code                String                 @unique
  name                String?
  description         String?
  value               Int
  type                VoucherType
  applicationType     VoucherApplicationType
  startDate           DateTime               @db.Timestamp(6)
  expires             DateTime               @db.Timestamp(6)
  isActive            Boolean                @default(true)
  autoApply           Boolean                @default(false)
  minPurchase         BigInt?
  maxDiscount         BigInt?
  maxShippingDiscount BigInt?
  totalLimit          Int?
  usedCount           Int                    @default(0)
  limitPerUser        Int?
  canCombine          Boolean                @default(false)
  createdAt           DateTime               @default(now()) @db.Timestamp(6)
  updatedAt           DateTime               @updatedAt
  categoryId          String?                @db.Uuid
  subCategoryId       String?                @db.Uuid
  redemptions         Redemption[]
  category            Category?              @relation(fields: [categoryId], references: [id])
  subCategory         SubCategory?           @relation(fields: [subCategoryId], references: [id])
  orders              Order[]                @relation("OrderToVoucher")
  products            Product[]              @relation("ProductToVoucher")
  variants            Variant[]              @relation("VariantToVoucher")
}

model Redemption {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String?  @db.Uuid
  email     String
  createdAt DateTime @default(now())
  voucherId String   @db.Uuid
  orderId   String
  user      User?    @relation(fields: [userId], references: [id])
  voucher   Voucher  @relation(fields: [voucherId], references: [id])

  @@unique([email, voucherId, orderId])
}

model Review {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  rating             Int
  comment            String
  createdAt          DateTime @default(now()) @db.Timestamp(6)
  productId          String   @db.Uuid
  isVerifiedPurchase Boolean  @default(false)
  orderId            String
  userId             String   @db.Uuid
  order              Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product            Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([orderId, productId])
  @@index([productId, createdAt], map: "idx_review_product_created")
  @@index([userId], map: "idx_review_user")
}

model Cart {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionCartId String
  items         Json[]   @default([]) @db.Json
  itemsPrice    BigInt
  totalPrice    BigInt
  taxPrice      BigInt
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  shippingPrice BigInt?
  notes         String?
  orderId       String?  @unique
  userId        String?  @db.Uuid
  order         Order?   @relation(fields: [orderId], references: [id])
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id               String      @id
  itemsPrice       BigInt
  totalPrice       BigInt
  trackingOrder    String?
  shippingPrice    BigInt
  taxPrice         BigInt      @default(0)
  discountAmount   BigInt      @default(0)
  isPaid           Boolean     @default(false)
  isDelivered      Boolean     @default(false)
  transactionToken String?     @unique
  courier          String?
  notes            String?
  paymentStatus    String?
  shippingInfo     Json?       @db.Json
  voucherCodes     String[]    @default([])
  deliveredAt      DateTime?   @db.Timestamp(6)
  paidAt           DateTime?   @db.Timestamp(6)
  createdAt        DateTime    @default(now()) @db.Timestamp(6)
  userId           String      @db.Uuid
  cart             Cart?
  user             User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems       OrderItem[]
  reviews          Review[]
  vouchers         Voucher[]   @relation("OrderToVoucher")

  @@index([userId, isDelivered, paymentStatus], map: "idx_order_user_delivery_payment")
  @@index([userId, createdAt], map: "idx_order_user_created")
  @@index([isDelivered, paymentStatus], map: "idx_order_delivery_payment")
}

model OrderItem {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  qty        Int
  price      BigInt
  name       String
  slug       String
  image      String
  variantId  String?   @db.Uuid
  weight     Int
  width      Int
  length     Int
  height     Int
  orderId    String    @default(uuid())
  productId  String    @db.Uuid
  campaignId String?   @db.Uuid
  campaign   Campaign? @relation(fields: [campaignId], references: [id])
  order      Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant    Variant?  @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([orderId, productId, variantId], map: "orderitems_orderId_productId_variantId_unique")
}

model Carousel {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  linkUrl        String
  altText        String?
  isActive       Boolean   @default(true)
  startDate      DateTime? @db.Timestamp(6)
  endDate        DateTime? @db.Timestamp(6)
  createdAt      DateTime  @default(now()) @db.Timestamp(6)
  desktopImageId String
  mobileImageId  String
  desktopImage   MediaFile @relation("CarouselDesktopImage", fields: [desktopImageId], references: [id])
  mobileImage    MediaFile @relation("CarouselMobileImage", fields: [mobileImageId], references: [id])

  @@map("carousels")
}

model Campaign {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String
  description     String?
  type            CampaignType   @default(FLASH_SALE)
  discountType    DiscountType   @default(PERCENT)
  defaultDiscount Int            @default(0)
  isActive        Boolean        @default(false)
  startDate       DateTime       @db.Timestamp(6)
  endDate         DateTime?      @db.Timestamp(6)
  totalSoldCount  Int            @default(0)
  priority        Int            @default(0)
  createdAt       DateTime       @default(now()) @db.Timestamp(6)
  updatedAt       DateTime       @updatedAt
  items           CampaignItem[]
  orderItems      OrderItem[]

  @@index([isActive, startDate, endDate])
  @@index([priority])
}

model CampaignItem {
  id                 String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  campaignId         String        @db.Uuid
  productId          String        @db.Uuid
  variantId          String?       @db.Uuid
  customDiscount     Int?
  customDiscountType DiscountType?
  stockLimit         Int?
  soldCount          Int           @default(0)
  addedAt            DateTime      @default(now())
  campaign           Campaign      @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  product            Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant            Variant?      @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([campaignId, productId, variantId])
  @@index([campaignId, productId])
  @@index([campaignId, variantId])
}

enum VoucherType {
  FIXED
  PERCENT
}

enum VoucherApplicationType {
  ALL_PRODUCTS
  CATEGORY
  SUBCATEGORY
  SPECIFIC_PRODUCTS
  SPECIFIC_VARIANTS
}

enum CampaignType {
  FLASH_SALE
  DAILY_DEALS
  PAYDAY_SALE
  SEASONAL
  CLEARANCE
  NEW_ARRIVAL
}

enum DiscountType {
  PERCENT
  FIXED
}
